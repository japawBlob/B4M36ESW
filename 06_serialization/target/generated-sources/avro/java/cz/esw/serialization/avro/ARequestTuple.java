/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package cz.esw.serialization.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ARequestTuple extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8616860741230406106L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ARequestTuple\",\"namespace\":\"cz.esw.serialization.avro\",\"fields\":[{\"name\":\"records\",\"type\":{\"type\":\"record\",\"name\":\"ARecords\",\"fields\":[{\"name\":\"DOWNLOAD\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"PING\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"UPLOAD\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]}},{\"name\":\"measurementInfo\",\"type\":{\"type\":\"record\",\"name\":\"AMeasurementInfo\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"measurerName\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ARequestTuple> ENCODER =
      new BinaryMessageEncoder<ARequestTuple>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ARequestTuple> DECODER =
      new BinaryMessageDecoder<ARequestTuple>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ARequestTuple> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ARequestTuple> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ARequestTuple> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ARequestTuple>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ARequestTuple to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ARequestTuple from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ARequestTuple instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ARequestTuple fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private cz.esw.serialization.avro.ARecords records;
  private cz.esw.serialization.avro.AMeasurementInfo measurementInfo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ARequestTuple() {}

  /**
   * All-args constructor.
   * @param records The new value for records
   * @param measurementInfo The new value for measurementInfo
   */
  public ARequestTuple(cz.esw.serialization.avro.ARecords records, cz.esw.serialization.avro.AMeasurementInfo measurementInfo) {
    this.records = records;
    this.measurementInfo = measurementInfo;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return records;
    case 1: return measurementInfo;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: records = (cz.esw.serialization.avro.ARecords)value$; break;
    case 1: measurementInfo = (cz.esw.serialization.avro.AMeasurementInfo)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'records' field.
   * @return The value of the 'records' field.
   */
  public cz.esw.serialization.avro.ARecords getRecords() {
    return records;
  }


  /**
   * Sets the value of the 'records' field.
   * @param value the value to set.
   */
  public void setRecords(cz.esw.serialization.avro.ARecords value) {
    this.records = value;
  }

  /**
   * Gets the value of the 'measurementInfo' field.
   * @return The value of the 'measurementInfo' field.
   */
  public cz.esw.serialization.avro.AMeasurementInfo getMeasurementInfo() {
    return measurementInfo;
  }


  /**
   * Sets the value of the 'measurementInfo' field.
   * @param value the value to set.
   */
  public void setMeasurementInfo(cz.esw.serialization.avro.AMeasurementInfo value) {
    this.measurementInfo = value;
  }

  /**
   * Creates a new ARequestTuple RecordBuilder.
   * @return A new ARequestTuple RecordBuilder
   */
  public static cz.esw.serialization.avro.ARequestTuple.Builder newBuilder() {
    return new cz.esw.serialization.avro.ARequestTuple.Builder();
  }

  /**
   * Creates a new ARequestTuple RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ARequestTuple RecordBuilder
   */
  public static cz.esw.serialization.avro.ARequestTuple.Builder newBuilder(cz.esw.serialization.avro.ARequestTuple.Builder other) {
    if (other == null) {
      return new cz.esw.serialization.avro.ARequestTuple.Builder();
    } else {
      return new cz.esw.serialization.avro.ARequestTuple.Builder(other);
    }
  }

  /**
   * Creates a new ARequestTuple RecordBuilder by copying an existing ARequestTuple instance.
   * @param other The existing instance to copy.
   * @return A new ARequestTuple RecordBuilder
   */
  public static cz.esw.serialization.avro.ARequestTuple.Builder newBuilder(cz.esw.serialization.avro.ARequestTuple other) {
    if (other == null) {
      return new cz.esw.serialization.avro.ARequestTuple.Builder();
    } else {
      return new cz.esw.serialization.avro.ARequestTuple.Builder(other);
    }
  }

  /**
   * RecordBuilder for ARequestTuple instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ARequestTuple>
    implements org.apache.avro.data.RecordBuilder<ARequestTuple> {

    private cz.esw.serialization.avro.ARecords records;
    private cz.esw.serialization.avro.ARecords.Builder recordsBuilder;
    private cz.esw.serialization.avro.AMeasurementInfo measurementInfo;
    private cz.esw.serialization.avro.AMeasurementInfo.Builder measurementInfoBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(cz.esw.serialization.avro.ARequestTuple.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.records)) {
        this.records = data().deepCopy(fields()[0].schema(), other.records);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasRecordsBuilder()) {
        this.recordsBuilder = cz.esw.serialization.avro.ARecords.newBuilder(other.getRecordsBuilder());
      }
      if (isValidValue(fields()[1], other.measurementInfo)) {
        this.measurementInfo = data().deepCopy(fields()[1].schema(), other.measurementInfo);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasMeasurementInfoBuilder()) {
        this.measurementInfoBuilder = cz.esw.serialization.avro.AMeasurementInfo.newBuilder(other.getMeasurementInfoBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ARequestTuple instance
     * @param other The existing instance to copy.
     */
    private Builder(cz.esw.serialization.avro.ARequestTuple other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.records)) {
        this.records = data().deepCopy(fields()[0].schema(), other.records);
        fieldSetFlags()[0] = true;
      }
      this.recordsBuilder = null;
      if (isValidValue(fields()[1], other.measurementInfo)) {
        this.measurementInfo = data().deepCopy(fields()[1].schema(), other.measurementInfo);
        fieldSetFlags()[1] = true;
      }
      this.measurementInfoBuilder = null;
    }

    /**
      * Gets the value of the 'records' field.
      * @return The value.
      */
    public cz.esw.serialization.avro.ARecords getRecords() {
      return records;
    }


    /**
      * Sets the value of the 'records' field.
      * @param value The value of 'records'.
      * @return This builder.
      */
    public cz.esw.serialization.avro.ARequestTuple.Builder setRecords(cz.esw.serialization.avro.ARecords value) {
      validate(fields()[0], value);
      this.recordsBuilder = null;
      this.records = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'records' field has been set.
      * @return True if the 'records' field has been set, false otherwise.
      */
    public boolean hasRecords() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'records' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public cz.esw.serialization.avro.ARecords.Builder getRecordsBuilder() {
      if (recordsBuilder == null) {
        if (hasRecords()) {
          setRecordsBuilder(cz.esw.serialization.avro.ARecords.newBuilder(records));
        } else {
          setRecordsBuilder(cz.esw.serialization.avro.ARecords.newBuilder());
        }
      }
      return recordsBuilder;
    }

    /**
     * Sets the Builder instance for the 'records' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public cz.esw.serialization.avro.ARequestTuple.Builder setRecordsBuilder(cz.esw.serialization.avro.ARecords.Builder value) {
      clearRecords();
      recordsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'records' field has an active Builder instance
     * @return True if the 'records' field has an active Builder instance
     */
    public boolean hasRecordsBuilder() {
      return recordsBuilder != null;
    }

    /**
      * Clears the value of the 'records' field.
      * @return This builder.
      */
    public cz.esw.serialization.avro.ARequestTuple.Builder clearRecords() {
      records = null;
      recordsBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'measurementInfo' field.
      * @return The value.
      */
    public cz.esw.serialization.avro.AMeasurementInfo getMeasurementInfo() {
      return measurementInfo;
    }


    /**
      * Sets the value of the 'measurementInfo' field.
      * @param value The value of 'measurementInfo'.
      * @return This builder.
      */
    public cz.esw.serialization.avro.ARequestTuple.Builder setMeasurementInfo(cz.esw.serialization.avro.AMeasurementInfo value) {
      validate(fields()[1], value);
      this.measurementInfoBuilder = null;
      this.measurementInfo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'measurementInfo' field has been set.
      * @return True if the 'measurementInfo' field has been set, false otherwise.
      */
    public boolean hasMeasurementInfo() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'measurementInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public cz.esw.serialization.avro.AMeasurementInfo.Builder getMeasurementInfoBuilder() {
      if (measurementInfoBuilder == null) {
        if (hasMeasurementInfo()) {
          setMeasurementInfoBuilder(cz.esw.serialization.avro.AMeasurementInfo.newBuilder(measurementInfo));
        } else {
          setMeasurementInfoBuilder(cz.esw.serialization.avro.AMeasurementInfo.newBuilder());
        }
      }
      return measurementInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'measurementInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public cz.esw.serialization.avro.ARequestTuple.Builder setMeasurementInfoBuilder(cz.esw.serialization.avro.AMeasurementInfo.Builder value) {
      clearMeasurementInfo();
      measurementInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'measurementInfo' field has an active Builder instance
     * @return True if the 'measurementInfo' field has an active Builder instance
     */
    public boolean hasMeasurementInfoBuilder() {
      return measurementInfoBuilder != null;
    }

    /**
      * Clears the value of the 'measurementInfo' field.
      * @return This builder.
      */
    public cz.esw.serialization.avro.ARequestTuple.Builder clearMeasurementInfo() {
      measurementInfo = null;
      measurementInfoBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ARequestTuple build() {
      try {
        ARequestTuple record = new ARequestTuple();
        if (recordsBuilder != null) {
          try {
            record.records = this.recordsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("records"));
            throw e;
          }
        } else {
          record.records = fieldSetFlags()[0] ? this.records : (cz.esw.serialization.avro.ARecords) defaultValue(fields()[0]);
        }
        if (measurementInfoBuilder != null) {
          try {
            record.measurementInfo = this.measurementInfoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("measurementInfo"));
            throw e;
          }
        } else {
          record.measurementInfo = fieldSetFlags()[1] ? this.measurementInfo : (cz.esw.serialization.avro.AMeasurementInfo) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ARequestTuple>
    WRITER$ = (org.apache.avro.io.DatumWriter<ARequestTuple>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ARequestTuple>
    READER$ = (org.apache.avro.io.DatumReader<ARequestTuple>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.records.customEncode(out);

    this.measurementInfo.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.records == null) {
        this.records = new cz.esw.serialization.avro.ARecords();
      }
      this.records.customDecode(in);

      if (this.measurementInfo == null) {
        this.measurementInfo = new cz.esw.serialization.avro.AMeasurementInfo();
      }
      this.measurementInfo.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.records == null) {
            this.records = new cz.esw.serialization.avro.ARecords();
          }
          this.records.customDecode(in);
          break;

        case 1:
          if (this.measurementInfo == null) {
            this.measurementInfo = new cz.esw.serialization.avro.AMeasurementInfo();
          }
          this.measurementInfo.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










