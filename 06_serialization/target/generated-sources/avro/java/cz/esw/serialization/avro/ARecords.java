/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package cz.esw.serialization.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ARecords extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3566635348113885617L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ARecords\",\"namespace\":\"cz.esw.serialization.avro\",\"fields\":[{\"name\":\"DOWNLOAD\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"PING\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"UPLOAD\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ARecords> ENCODER =
      new BinaryMessageEncoder<ARecords>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ARecords> DECODER =
      new BinaryMessageDecoder<ARecords>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ARecords> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ARecords> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ARecords> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ARecords>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ARecords to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ARecords from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ARecords instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ARecords fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<java.lang.Double> DOWNLOAD;
  private java.util.List<java.lang.Double> PING;
  private java.util.List<java.lang.Double> UPLOAD;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ARecords() {}

  /**
   * All-args constructor.
   * @param DOWNLOAD The new value for DOWNLOAD
   * @param PING The new value for PING
   * @param UPLOAD The new value for UPLOAD
   */
  public ARecords(java.util.List<java.lang.Double> DOWNLOAD, java.util.List<java.lang.Double> PING, java.util.List<java.lang.Double> UPLOAD) {
    this.DOWNLOAD = DOWNLOAD;
    this.PING = PING;
    this.UPLOAD = UPLOAD;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return DOWNLOAD;
    case 1: return PING;
    case 2: return UPLOAD;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: DOWNLOAD = (java.util.List<java.lang.Double>)value$; break;
    case 1: PING = (java.util.List<java.lang.Double>)value$; break;
    case 2: UPLOAD = (java.util.List<java.lang.Double>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'DOWNLOAD' field.
   * @return The value of the 'DOWNLOAD' field.
   */
  public java.util.List<java.lang.Double> getDOWNLOAD() {
    return DOWNLOAD;
  }


  /**
   * Sets the value of the 'DOWNLOAD' field.
   * @param value the value to set.
   */
  public void setDOWNLOAD(java.util.List<java.lang.Double> value) {
    this.DOWNLOAD = value;
  }

  /**
   * Gets the value of the 'PING' field.
   * @return The value of the 'PING' field.
   */
  public java.util.List<java.lang.Double> getPING() {
    return PING;
  }


  /**
   * Sets the value of the 'PING' field.
   * @param value the value to set.
   */
  public void setPING(java.util.List<java.lang.Double> value) {
    this.PING = value;
  }

  /**
   * Gets the value of the 'UPLOAD' field.
   * @return The value of the 'UPLOAD' field.
   */
  public java.util.List<java.lang.Double> getUPLOAD() {
    return UPLOAD;
  }


  /**
   * Sets the value of the 'UPLOAD' field.
   * @param value the value to set.
   */
  public void setUPLOAD(java.util.List<java.lang.Double> value) {
    this.UPLOAD = value;
  }

  /**
   * Creates a new ARecords RecordBuilder.
   * @return A new ARecords RecordBuilder
   */
  public static cz.esw.serialization.avro.ARecords.Builder newBuilder() {
    return new cz.esw.serialization.avro.ARecords.Builder();
  }

  /**
   * Creates a new ARecords RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ARecords RecordBuilder
   */
  public static cz.esw.serialization.avro.ARecords.Builder newBuilder(cz.esw.serialization.avro.ARecords.Builder other) {
    if (other == null) {
      return new cz.esw.serialization.avro.ARecords.Builder();
    } else {
      return new cz.esw.serialization.avro.ARecords.Builder(other);
    }
  }

  /**
   * Creates a new ARecords RecordBuilder by copying an existing ARecords instance.
   * @param other The existing instance to copy.
   * @return A new ARecords RecordBuilder
   */
  public static cz.esw.serialization.avro.ARecords.Builder newBuilder(cz.esw.serialization.avro.ARecords other) {
    if (other == null) {
      return new cz.esw.serialization.avro.ARecords.Builder();
    } else {
      return new cz.esw.serialization.avro.ARecords.Builder(other);
    }
  }

  /**
   * RecordBuilder for ARecords instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ARecords>
    implements org.apache.avro.data.RecordBuilder<ARecords> {

    private java.util.List<java.lang.Double> DOWNLOAD;
    private java.util.List<java.lang.Double> PING;
    private java.util.List<java.lang.Double> UPLOAD;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(cz.esw.serialization.avro.ARecords.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.DOWNLOAD)) {
        this.DOWNLOAD = data().deepCopy(fields()[0].schema(), other.DOWNLOAD);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.PING)) {
        this.PING = data().deepCopy(fields()[1].schema(), other.PING);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.UPLOAD)) {
        this.UPLOAD = data().deepCopy(fields()[2].schema(), other.UPLOAD);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ARecords instance
     * @param other The existing instance to copy.
     */
    private Builder(cz.esw.serialization.avro.ARecords other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.DOWNLOAD)) {
        this.DOWNLOAD = data().deepCopy(fields()[0].schema(), other.DOWNLOAD);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.PING)) {
        this.PING = data().deepCopy(fields()[1].schema(), other.PING);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.UPLOAD)) {
        this.UPLOAD = data().deepCopy(fields()[2].schema(), other.UPLOAD);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'DOWNLOAD' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getDOWNLOAD() {
      return DOWNLOAD;
    }


    /**
      * Sets the value of the 'DOWNLOAD' field.
      * @param value The value of 'DOWNLOAD'.
      * @return This builder.
      */
    public cz.esw.serialization.avro.ARecords.Builder setDOWNLOAD(java.util.List<java.lang.Double> value) {
      validate(fields()[0], value);
      this.DOWNLOAD = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'DOWNLOAD' field has been set.
      * @return True if the 'DOWNLOAD' field has been set, false otherwise.
      */
    public boolean hasDOWNLOAD() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'DOWNLOAD' field.
      * @return This builder.
      */
    public cz.esw.serialization.avro.ARecords.Builder clearDOWNLOAD() {
      DOWNLOAD = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'PING' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getPING() {
      return PING;
    }


    /**
      * Sets the value of the 'PING' field.
      * @param value The value of 'PING'.
      * @return This builder.
      */
    public cz.esw.serialization.avro.ARecords.Builder setPING(java.util.List<java.lang.Double> value) {
      validate(fields()[1], value);
      this.PING = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'PING' field has been set.
      * @return True if the 'PING' field has been set, false otherwise.
      */
    public boolean hasPING() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'PING' field.
      * @return This builder.
      */
    public cz.esw.serialization.avro.ARecords.Builder clearPING() {
      PING = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'UPLOAD' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getUPLOAD() {
      return UPLOAD;
    }


    /**
      * Sets the value of the 'UPLOAD' field.
      * @param value The value of 'UPLOAD'.
      * @return This builder.
      */
    public cz.esw.serialization.avro.ARecords.Builder setUPLOAD(java.util.List<java.lang.Double> value) {
      validate(fields()[2], value);
      this.UPLOAD = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'UPLOAD' field has been set.
      * @return True if the 'UPLOAD' field has been set, false otherwise.
      */
    public boolean hasUPLOAD() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'UPLOAD' field.
      * @return This builder.
      */
    public cz.esw.serialization.avro.ARecords.Builder clearUPLOAD() {
      UPLOAD = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ARecords build() {
      try {
        ARecords record = new ARecords();
        record.DOWNLOAD = fieldSetFlags()[0] ? this.DOWNLOAD : (java.util.List<java.lang.Double>) defaultValue(fields()[0]);
        record.PING = fieldSetFlags()[1] ? this.PING : (java.util.List<java.lang.Double>) defaultValue(fields()[1]);
        record.UPLOAD = fieldSetFlags()[2] ? this.UPLOAD : (java.util.List<java.lang.Double>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ARecords>
    WRITER$ = (org.apache.avro.io.DatumWriter<ARecords>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ARecords>
    READER$ = (org.apache.avro.io.DatumReader<ARecords>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.DOWNLOAD.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.Double e0: this.DOWNLOAD) {
      actualSize0++;
      out.startItem();
      out.writeDouble(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.PING.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.Double e1: this.PING) {
      actualSize1++;
      out.startItem();
      out.writeDouble(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.UPLOAD.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.lang.Double e2: this.UPLOAD) {
      actualSize2++;
      out.startItem();
      out.writeDouble(e2);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.Double> a0 = this.DOWNLOAD;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("DOWNLOAD").schema());
        this.DOWNLOAD = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readDouble();
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.Double> a1 = this.PING;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("PING").schema());
        this.PING = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readDouble();
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<java.lang.Double> a2 = this.UPLOAD;
      if (a2 == null) {
        a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("UPLOAD").schema());
        this.UPLOAD = a2;
      } else a2.clear();
      SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
          e2 = in.readDouble();
          a2.add(e2);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.Double> a0 = this.DOWNLOAD;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("DOWNLOAD").schema());
            this.DOWNLOAD = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readDouble();
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.Double> a1 = this.PING;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("PING").schema());
            this.PING = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readDouble();
              a1.add(e1);
            }
          }
          break;

        case 2:
          long size2 = in.readArrayStart();
          java.util.List<java.lang.Double> a2 = this.UPLOAD;
          if (a2 == null) {
            a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("UPLOAD").schema());
            this.UPLOAD = a2;
          } else a2.clear();
          SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
              e2 = in.readDouble();
              a2.add(e2);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










