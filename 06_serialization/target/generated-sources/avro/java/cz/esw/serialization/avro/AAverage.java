/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package cz.esw.serialization.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AAverage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1666556767727843415L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AAverage\",\"namespace\":\"cz.esw.serialization.avro\",\"fields\":[{\"name\":\"DOWNLOAD\",\"type\":\"double\"},{\"name\":\"PING\",\"type\":\"double\"},{\"name\":\"UPLOAD\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AAverage> ENCODER =
      new BinaryMessageEncoder<AAverage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AAverage> DECODER =
      new BinaryMessageDecoder<AAverage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AAverage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AAverage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AAverage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AAverage>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AAverage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AAverage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AAverage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AAverage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private double DOWNLOAD;
  private double PING;
  private double UPLOAD;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AAverage() {}

  /**
   * All-args constructor.
   * @param DOWNLOAD The new value for DOWNLOAD
   * @param PING The new value for PING
   * @param UPLOAD The new value for UPLOAD
   */
  public AAverage(java.lang.Double DOWNLOAD, java.lang.Double PING, java.lang.Double UPLOAD) {
    this.DOWNLOAD = DOWNLOAD;
    this.PING = PING;
    this.UPLOAD = UPLOAD;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return DOWNLOAD;
    case 1: return PING;
    case 2: return UPLOAD;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: DOWNLOAD = (java.lang.Double)value$; break;
    case 1: PING = (java.lang.Double)value$; break;
    case 2: UPLOAD = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'DOWNLOAD' field.
   * @return The value of the 'DOWNLOAD' field.
   */
  public double getDOWNLOAD() {
    return DOWNLOAD;
  }


  /**
   * Sets the value of the 'DOWNLOAD' field.
   * @param value the value to set.
   */
  public void setDOWNLOAD(double value) {
    this.DOWNLOAD = value;
  }

  /**
   * Gets the value of the 'PING' field.
   * @return The value of the 'PING' field.
   */
  public double getPING() {
    return PING;
  }


  /**
   * Sets the value of the 'PING' field.
   * @param value the value to set.
   */
  public void setPING(double value) {
    this.PING = value;
  }

  /**
   * Gets the value of the 'UPLOAD' field.
   * @return The value of the 'UPLOAD' field.
   */
  public double getUPLOAD() {
    return UPLOAD;
  }


  /**
   * Sets the value of the 'UPLOAD' field.
   * @param value the value to set.
   */
  public void setUPLOAD(double value) {
    this.UPLOAD = value;
  }

  /**
   * Creates a new AAverage RecordBuilder.
   * @return A new AAverage RecordBuilder
   */
  public static cz.esw.serialization.avro.AAverage.Builder newBuilder() {
    return new cz.esw.serialization.avro.AAverage.Builder();
  }

  /**
   * Creates a new AAverage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AAverage RecordBuilder
   */
  public static cz.esw.serialization.avro.AAverage.Builder newBuilder(cz.esw.serialization.avro.AAverage.Builder other) {
    if (other == null) {
      return new cz.esw.serialization.avro.AAverage.Builder();
    } else {
      return new cz.esw.serialization.avro.AAverage.Builder(other);
    }
  }

  /**
   * Creates a new AAverage RecordBuilder by copying an existing AAverage instance.
   * @param other The existing instance to copy.
   * @return A new AAverage RecordBuilder
   */
  public static cz.esw.serialization.avro.AAverage.Builder newBuilder(cz.esw.serialization.avro.AAverage other) {
    if (other == null) {
      return new cz.esw.serialization.avro.AAverage.Builder();
    } else {
      return new cz.esw.serialization.avro.AAverage.Builder(other);
    }
  }

  /**
   * RecordBuilder for AAverage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AAverage>
    implements org.apache.avro.data.RecordBuilder<AAverage> {

    private double DOWNLOAD;
    private double PING;
    private double UPLOAD;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(cz.esw.serialization.avro.AAverage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.DOWNLOAD)) {
        this.DOWNLOAD = data().deepCopy(fields()[0].schema(), other.DOWNLOAD);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.PING)) {
        this.PING = data().deepCopy(fields()[1].schema(), other.PING);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.UPLOAD)) {
        this.UPLOAD = data().deepCopy(fields()[2].schema(), other.UPLOAD);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing AAverage instance
     * @param other The existing instance to copy.
     */
    private Builder(cz.esw.serialization.avro.AAverage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.DOWNLOAD)) {
        this.DOWNLOAD = data().deepCopy(fields()[0].schema(), other.DOWNLOAD);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.PING)) {
        this.PING = data().deepCopy(fields()[1].schema(), other.PING);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.UPLOAD)) {
        this.UPLOAD = data().deepCopy(fields()[2].schema(), other.UPLOAD);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'DOWNLOAD' field.
      * @return The value.
      */
    public double getDOWNLOAD() {
      return DOWNLOAD;
    }


    /**
      * Sets the value of the 'DOWNLOAD' field.
      * @param value The value of 'DOWNLOAD'.
      * @return This builder.
      */
    public cz.esw.serialization.avro.AAverage.Builder setDOWNLOAD(double value) {
      validate(fields()[0], value);
      this.DOWNLOAD = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'DOWNLOAD' field has been set.
      * @return True if the 'DOWNLOAD' field has been set, false otherwise.
      */
    public boolean hasDOWNLOAD() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'DOWNLOAD' field.
      * @return This builder.
      */
    public cz.esw.serialization.avro.AAverage.Builder clearDOWNLOAD() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'PING' field.
      * @return The value.
      */
    public double getPING() {
      return PING;
    }


    /**
      * Sets the value of the 'PING' field.
      * @param value The value of 'PING'.
      * @return This builder.
      */
    public cz.esw.serialization.avro.AAverage.Builder setPING(double value) {
      validate(fields()[1], value);
      this.PING = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'PING' field has been set.
      * @return True if the 'PING' field has been set, false otherwise.
      */
    public boolean hasPING() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'PING' field.
      * @return This builder.
      */
    public cz.esw.serialization.avro.AAverage.Builder clearPING() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'UPLOAD' field.
      * @return The value.
      */
    public double getUPLOAD() {
      return UPLOAD;
    }


    /**
      * Sets the value of the 'UPLOAD' field.
      * @param value The value of 'UPLOAD'.
      * @return This builder.
      */
    public cz.esw.serialization.avro.AAverage.Builder setUPLOAD(double value) {
      validate(fields()[2], value);
      this.UPLOAD = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'UPLOAD' field has been set.
      * @return True if the 'UPLOAD' field has been set, false otherwise.
      */
    public boolean hasUPLOAD() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'UPLOAD' field.
      * @return This builder.
      */
    public cz.esw.serialization.avro.AAverage.Builder clearUPLOAD() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AAverage build() {
      try {
        AAverage record = new AAverage();
        record.DOWNLOAD = fieldSetFlags()[0] ? this.DOWNLOAD : (java.lang.Double) defaultValue(fields()[0]);
        record.PING = fieldSetFlags()[1] ? this.PING : (java.lang.Double) defaultValue(fields()[1]);
        record.UPLOAD = fieldSetFlags()[2] ? this.UPLOAD : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AAverage>
    WRITER$ = (org.apache.avro.io.DatumWriter<AAverage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AAverage>
    READER$ = (org.apache.avro.io.DatumReader<AAverage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeDouble(this.DOWNLOAD);

    out.writeDouble(this.PING);

    out.writeDouble(this.UPLOAD);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.DOWNLOAD = in.readDouble();

      this.PING = in.readDouble();

      this.UPLOAD = in.readDouble();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.DOWNLOAD = in.readDouble();
          break;

        case 1:
          this.PING = in.readDouble();
          break;

        case 2:
          this.UPLOAD = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










