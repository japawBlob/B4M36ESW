// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measurements.proto

#include "measurements.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace esw {
PROTOBUF_CONSTEXPR MeasurementInfo::MeasurementInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.measurername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeasurementInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeasurementInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeasurementInfoDefaultTypeInternal() {}
  union {
    MeasurementInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasurementInfoDefaultTypeInternal _MeasurementInfo_default_instance_;
PROTOBUF_CONSTEXPR MeasurementsRequest_RequestTuple::MeasurementsRequest_RequestTuple(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.measurementinfo_)*/nullptr
  , /*decltype(_impl_.records_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeasurementsRequest_RequestTupleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeasurementsRequest_RequestTupleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeasurementsRequest_RequestTupleDefaultTypeInternal() {}
  union {
    MeasurementsRequest_RequestTuple _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasurementsRequest_RequestTupleDefaultTypeInternal _MeasurementsRequest_RequestTuple_default_instance_;
PROTOBUF_CONSTEXPR MeasurementsRequest::MeasurementsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requesttuple_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeasurementsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeasurementsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeasurementsRequestDefaultTypeInternal() {}
  union {
    MeasurementsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasurementsRequestDefaultTypeInternal _MeasurementsRequest_default_instance_;
PROTOBUF_CONSTEXPR Records::Records(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.download_)*/{}
  , /*decltype(_impl_.upload_)*/{}
  , /*decltype(_impl_.ping_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecordsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordsDefaultTypeInternal() {}
  union {
    Records _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordsDefaultTypeInternal _Records_default_instance_;
PROTOBUF_CONSTEXPR MeasurementsResponse_ResponseTuple::MeasurementsResponse_ResponseTuple(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.measurementinfo_)*/nullptr
  , /*decltype(_impl_.average_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeasurementsResponse_ResponseTupleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeasurementsResponse_ResponseTupleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeasurementsResponse_ResponseTupleDefaultTypeInternal() {}
  union {
    MeasurementsResponse_ResponseTuple _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasurementsResponse_ResponseTupleDefaultTypeInternal _MeasurementsResponse_ResponseTuple_default_instance_;
PROTOBUF_CONSTEXPR MeasurementsResponse::MeasurementsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responsetuple_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeasurementsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeasurementsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeasurementsResponseDefaultTypeInternal() {}
  union {
    MeasurementsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasurementsResponseDefaultTypeInternal _MeasurementsResponse_default_instance_;
PROTOBUF_CONSTEXPR Average::Average(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.download_)*/0
  , /*decltype(_impl_.upload_)*/0
  , /*decltype(_impl_.ping_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AverageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AverageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AverageDefaultTypeInternal() {}
  union {
    Average _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AverageDefaultTypeInternal _Average_default_instance_;
}  // namespace esw
static ::_pb::Metadata file_level_metadata_measurements_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_measurements_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_measurements_2eproto = nullptr;

const uint32_t TableStruct_measurements_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementInfo, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementInfo, _impl_.measurername_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementsRequest_RequestTuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementsRequest_RequestTuple, _impl_.measurementinfo_),
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementsRequest_RequestTuple, _impl_.records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementsRequest, _impl_.requesttuple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::Records, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::Records, _impl_.download_),
  PROTOBUF_FIELD_OFFSET(::esw::Records, _impl_.upload_),
  PROTOBUF_FIELD_OFFSET(::esw::Records, _impl_.ping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementsResponse_ResponseTuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementsResponse_ResponseTuple, _impl_.measurementinfo_),
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementsResponse_ResponseTuple, _impl_.average_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::MeasurementsResponse, _impl_.responsetuple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::Average, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::Average, _impl_.download_),
  PROTOBUF_FIELD_OFFSET(::esw::Average, _impl_.upload_),
  PROTOBUF_FIELD_OFFSET(::esw::Average, _impl_.ping_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::esw::MeasurementInfo)},
  { 9, -1, -1, sizeof(::esw::MeasurementsRequest_RequestTuple)},
  { 17, -1, -1, sizeof(::esw::MeasurementsRequest)},
  { 24, -1, -1, sizeof(::esw::Records)},
  { 33, -1, -1, sizeof(::esw::MeasurementsResponse_ResponseTuple)},
  { 41, -1, -1, sizeof(::esw::MeasurementsResponse)},
  { 48, -1, -1, sizeof(::esw::Average)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::esw::_MeasurementInfo_default_instance_._instance,
  &::esw::_MeasurementsRequest_RequestTuple_default_instance_._instance,
  &::esw::_MeasurementsRequest_default_instance_._instance,
  &::esw::_Records_default_instance_._instance,
  &::esw::_MeasurementsResponse_ResponseTuple_default_instance_._instance,
  &::esw::_MeasurementsResponse_default_instance_._instance,
  &::esw::_Average_default_instance_._instance,
};

const char descriptor_table_protodef_measurements_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022measurements.proto\022\003esw\"F\n\017Measurement"
  "Info\022\n\n\002id\030\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\003\022\024\n\014m"
  "easurerName\030\003 \001(\t\"\260\001\n\023MeasurementsReques"
  "t\022;\n\014requestTuple\030\001 \003(\0132%.esw.Measuremen"
  "tsRequest.RequestTuple\032\\\n\014RequestTuple\022-"
  "\n\017measurementInfo\030\001 \001(\0132\024.esw.Measuremen"
  "tInfo\022\035\n\007records\030\002 \001(\0132\014.esw.Records\"9\n\007"
  "Records\022\020\n\010Download\030\001 \003(\001\022\016\n\006Upload\030\002 \003("
  "\001\022\014\n\004Ping\030\003 \003(\001\"\265\001\n\024MeasurementsResponse"
  "\022>\n\rresponseTuple\030\001 \003(\0132\'.esw.Measuremen"
  "tsResponse.ResponseTuple\032]\n\rResponseTupl"
  "e\022-\n\017measurementInfo\030\001 \001(\0132\024.esw.Measure"
  "mentInfo\022\035\n\007average\030\002 \001(\0132\014.esw.Average\""
  "9\n\007Average\022\020\n\010Download\030\001 \001(\001\022\016\n\006Upload\030\002"
  " \001(\001\022\014\n\004Ping\030\003 \001(\001B\036\n\032cz.esw.serializati"
  "on.protoP\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_measurements_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_measurements_2eproto = {
    false, false, 618, descriptor_table_protodef_measurements_2eproto,
    "measurements.proto",
    &descriptor_table_measurements_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_measurements_2eproto::offsets,
    file_level_metadata_measurements_2eproto, file_level_enum_descriptors_measurements_2eproto,
    file_level_service_descriptors_measurements_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_measurements_2eproto_getter() {
  return &descriptor_table_measurements_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_measurements_2eproto(&descriptor_table_measurements_2eproto);
namespace esw {

// ===================================================================

class MeasurementInfo::_Internal {
 public:
};

MeasurementInfo::MeasurementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.MeasurementInfo)
}
MeasurementInfo::MeasurementInfo(const MeasurementInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.measurername_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.measurername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.measurername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_measurername().empty()) {
    _impl_.measurername_.Set(from._internal_measurername(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:esw.MeasurementInfo)
}

inline void MeasurementInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.measurername_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.measurername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.measurername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MeasurementInfo::~MeasurementInfo() {
  // @@protoc_insertion_point(destructor:esw.MeasurementInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeasurementInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.measurername_.Destroy();
}

void MeasurementInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeasurementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.MeasurementInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.measurername_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasurementInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string measurerName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_measurername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "esw.MeasurementInfo.measurerName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeasurementInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.MeasurementInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // string measurerName = 3;
  if (!this->_internal_measurername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_measurername().data(), static_cast<int>(this->_internal_measurername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esw.MeasurementInfo.measurerName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_measurername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.MeasurementInfo)
  return target;
}

size_t MeasurementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.MeasurementInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string measurerName = 3;
  if (!this->_internal_measurername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_measurername());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasurementInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeasurementInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeasurementInfo::GetClassData() const { return &_class_data_; }

void MeasurementInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeasurementInfo *>(to)->MergeFrom(
      static_cast<const MeasurementInfo &>(from));
}


void MeasurementInfo::MergeFrom(const MeasurementInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esw.MeasurementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_measurername().empty()) {
    _internal_set_measurername(from._internal_measurername());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasurementInfo::CopyFrom(const MeasurementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.MeasurementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasurementInfo::IsInitialized() const {
  return true;
}

void MeasurementInfo::InternalSwap(MeasurementInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.measurername_, lhs_arena,
      &other->_impl_.measurername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeasurementInfo, _impl_.id_)
      + sizeof(MeasurementInfo::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MeasurementInfo, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasurementInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[0]);
}

// ===================================================================

class MeasurementsRequest_RequestTuple::_Internal {
 public:
  static const ::esw::MeasurementInfo& measurementinfo(const MeasurementsRequest_RequestTuple* msg);
  static const ::esw::Records& records(const MeasurementsRequest_RequestTuple* msg);
};

const ::esw::MeasurementInfo&
MeasurementsRequest_RequestTuple::_Internal::measurementinfo(const MeasurementsRequest_RequestTuple* msg) {
  return *msg->_impl_.measurementinfo_;
}
const ::esw::Records&
MeasurementsRequest_RequestTuple::_Internal::records(const MeasurementsRequest_RequestTuple* msg) {
  return *msg->_impl_.records_;
}
MeasurementsRequest_RequestTuple::MeasurementsRequest_RequestTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.MeasurementsRequest.RequestTuple)
}
MeasurementsRequest_RequestTuple::MeasurementsRequest_RequestTuple(const MeasurementsRequest_RequestTuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.measurementinfo_){nullptr}
    , decltype(_impl_.records_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_measurementinfo()) {
    _impl_.measurementinfo_ = new ::esw::MeasurementInfo(*from._impl_.measurementinfo_);
  }
  if (from._internal_has_records()) {
    _impl_.records_ = new ::esw::Records(*from._impl_.records_);
  }
  // @@protoc_insertion_point(copy_constructor:esw.MeasurementsRequest.RequestTuple)
}

inline void MeasurementsRequest_RequestTuple::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.measurementinfo_){nullptr}
    , decltype(_impl_.records_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MeasurementsRequest_RequestTuple::~MeasurementsRequest_RequestTuple() {
  // @@protoc_insertion_point(destructor:esw.MeasurementsRequest.RequestTuple)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeasurementsRequest_RequestTuple::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.measurementinfo_;
  if (this != internal_default_instance()) delete _impl_.records_;
}

void MeasurementsRequest_RequestTuple::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeasurementsRequest_RequestTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.MeasurementsRequest.RequestTuple)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.measurementinfo_ != nullptr) {
    delete _impl_.measurementinfo_;
  }
  _impl_.measurementinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.records_ != nullptr) {
    delete _impl_.records_;
  }
  _impl_.records_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasurementsRequest_RequestTuple::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .esw.MeasurementInfo measurementInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_measurementinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .esw.Records records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_records(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeasurementsRequest_RequestTuple::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.MeasurementsRequest.RequestTuple)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .esw.MeasurementInfo measurementInfo = 1;
  if (this->_internal_has_measurementinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::measurementinfo(this),
        _Internal::measurementinfo(this).GetCachedSize(), target, stream);
  }

  // .esw.Records records = 2;
  if (this->_internal_has_records()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::records(this),
        _Internal::records(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.MeasurementsRequest.RequestTuple)
  return target;
}

size_t MeasurementsRequest_RequestTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.MeasurementsRequest.RequestTuple)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esw.MeasurementInfo measurementInfo = 1;
  if (this->_internal_has_measurementinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.measurementinfo_);
  }

  // .esw.Records records = 2;
  if (this->_internal_has_records()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.records_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasurementsRequest_RequestTuple::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeasurementsRequest_RequestTuple::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeasurementsRequest_RequestTuple::GetClassData() const { return &_class_data_; }

void MeasurementsRequest_RequestTuple::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeasurementsRequest_RequestTuple *>(to)->MergeFrom(
      static_cast<const MeasurementsRequest_RequestTuple &>(from));
}


void MeasurementsRequest_RequestTuple::MergeFrom(const MeasurementsRequest_RequestTuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esw.MeasurementsRequest.RequestTuple)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_measurementinfo()) {
    _internal_mutable_measurementinfo()->::esw::MeasurementInfo::MergeFrom(from._internal_measurementinfo());
  }
  if (from._internal_has_records()) {
    _internal_mutable_records()->::esw::Records::MergeFrom(from._internal_records());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasurementsRequest_RequestTuple::CopyFrom(const MeasurementsRequest_RequestTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.MeasurementsRequest.RequestTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasurementsRequest_RequestTuple::IsInitialized() const {
  return true;
}

void MeasurementsRequest_RequestTuple::InternalSwap(MeasurementsRequest_RequestTuple* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeasurementsRequest_RequestTuple, _impl_.records_)
      + sizeof(MeasurementsRequest_RequestTuple::_impl_.records_)
      - PROTOBUF_FIELD_OFFSET(MeasurementsRequest_RequestTuple, _impl_.measurementinfo_)>(
          reinterpret_cast<char*>(&_impl_.measurementinfo_),
          reinterpret_cast<char*>(&other->_impl_.measurementinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasurementsRequest_RequestTuple::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[1]);
}

// ===================================================================

class MeasurementsRequest::_Internal {
 public:
};

MeasurementsRequest::MeasurementsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.MeasurementsRequest)
}
MeasurementsRequest::MeasurementsRequest(const MeasurementsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.requesttuple_){from._impl_.requesttuple_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esw.MeasurementsRequest)
}

inline void MeasurementsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requesttuple_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MeasurementsRequest::~MeasurementsRequest() {
  // @@protoc_insertion_point(destructor:esw.MeasurementsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeasurementsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requesttuple_.~RepeatedPtrField();
}

void MeasurementsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeasurementsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.MeasurementsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requesttuple_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasurementsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .esw.MeasurementsRequest.RequestTuple requestTuple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requesttuple(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeasurementsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.MeasurementsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .esw.MeasurementsRequest.RequestTuple requestTuple = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_requesttuple_size()); i < n; i++) {
    const auto& repfield = this->_internal_requesttuple(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.MeasurementsRequest)
  return target;
}

size_t MeasurementsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.MeasurementsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esw.MeasurementsRequest.RequestTuple requestTuple = 1;
  total_size += 1UL * this->_internal_requesttuple_size();
  for (const auto& msg : this->_impl_.requesttuple_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasurementsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeasurementsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeasurementsRequest::GetClassData() const { return &_class_data_; }

void MeasurementsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeasurementsRequest *>(to)->MergeFrom(
      static_cast<const MeasurementsRequest &>(from));
}


void MeasurementsRequest::MergeFrom(const MeasurementsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esw.MeasurementsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.requesttuple_.MergeFrom(from._impl_.requesttuple_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasurementsRequest::CopyFrom(const MeasurementsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.MeasurementsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasurementsRequest::IsInitialized() const {
  return true;
}

void MeasurementsRequest::InternalSwap(MeasurementsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.requesttuple_.InternalSwap(&other->_impl_.requesttuple_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasurementsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[2]);
}

// ===================================================================

class Records::_Internal {
 public:
};

Records::Records(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.Records)
}
Records::Records(const Records& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.download_){from._impl_.download_}
    , decltype(_impl_.upload_){from._impl_.upload_}
    , decltype(_impl_.ping_){from._impl_.ping_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esw.Records)
}

inline void Records::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.download_){arena}
    , decltype(_impl_.upload_){arena}
    , decltype(_impl_.ping_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Records::~Records() {
  // @@protoc_insertion_point(destructor:esw.Records)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Records::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.download_.~RepeatedField();
  _impl_.upload_.~RepeatedField();
  _impl_.ping_.~RepeatedField();
}

void Records::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Records::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.Records)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.download_.Clear();
  _impl_.upload_.Clear();
  _impl_.ping_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Records::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double Download = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_download(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_download(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double Upload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_upload(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_upload(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double Ping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ping(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_ping(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Records::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.Records)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double Download = 1;
  if (this->_internal_download_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_download(), target);
  }

  // repeated double Upload = 2;
  if (this->_internal_upload_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_upload(), target);
  }

  // repeated double Ping = 3;
  if (this->_internal_ping_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.Records)
  return target;
}

size_t Records::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.Records)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double Download = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_download_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double Upload = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_upload_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double Ping = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ping_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Records::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Records::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Records::GetClassData() const { return &_class_data_; }

void Records::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Records *>(to)->MergeFrom(
      static_cast<const Records &>(from));
}


void Records::MergeFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esw.Records)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.download_.MergeFrom(from._impl_.download_);
  _impl_.upload_.MergeFrom(from._impl_.upload_);
  _impl_.ping_.MergeFrom(from._impl_.ping_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Records::CopyFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.Records)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Records::IsInitialized() const {
  return true;
}

void Records::InternalSwap(Records* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.download_.InternalSwap(&other->_impl_.download_);
  _impl_.upload_.InternalSwap(&other->_impl_.upload_);
  _impl_.ping_.InternalSwap(&other->_impl_.ping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Records::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[3]);
}

// ===================================================================

class MeasurementsResponse_ResponseTuple::_Internal {
 public:
  static const ::esw::MeasurementInfo& measurementinfo(const MeasurementsResponse_ResponseTuple* msg);
  static const ::esw::Average& average(const MeasurementsResponse_ResponseTuple* msg);
};

const ::esw::MeasurementInfo&
MeasurementsResponse_ResponseTuple::_Internal::measurementinfo(const MeasurementsResponse_ResponseTuple* msg) {
  return *msg->_impl_.measurementinfo_;
}
const ::esw::Average&
MeasurementsResponse_ResponseTuple::_Internal::average(const MeasurementsResponse_ResponseTuple* msg) {
  return *msg->_impl_.average_;
}
MeasurementsResponse_ResponseTuple::MeasurementsResponse_ResponseTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.MeasurementsResponse.ResponseTuple)
}
MeasurementsResponse_ResponseTuple::MeasurementsResponse_ResponseTuple(const MeasurementsResponse_ResponseTuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.measurementinfo_){nullptr}
    , decltype(_impl_.average_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_measurementinfo()) {
    _impl_.measurementinfo_ = new ::esw::MeasurementInfo(*from._impl_.measurementinfo_);
  }
  if (from._internal_has_average()) {
    _impl_.average_ = new ::esw::Average(*from._impl_.average_);
  }
  // @@protoc_insertion_point(copy_constructor:esw.MeasurementsResponse.ResponseTuple)
}

inline void MeasurementsResponse_ResponseTuple::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.measurementinfo_){nullptr}
    , decltype(_impl_.average_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MeasurementsResponse_ResponseTuple::~MeasurementsResponse_ResponseTuple() {
  // @@protoc_insertion_point(destructor:esw.MeasurementsResponse.ResponseTuple)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeasurementsResponse_ResponseTuple::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.measurementinfo_;
  if (this != internal_default_instance()) delete _impl_.average_;
}

void MeasurementsResponse_ResponseTuple::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeasurementsResponse_ResponseTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.MeasurementsResponse.ResponseTuple)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.measurementinfo_ != nullptr) {
    delete _impl_.measurementinfo_;
  }
  _impl_.measurementinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.average_ != nullptr) {
    delete _impl_.average_;
  }
  _impl_.average_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasurementsResponse_ResponseTuple::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .esw.MeasurementInfo measurementInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_measurementinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .esw.Average average = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_average(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeasurementsResponse_ResponseTuple::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.MeasurementsResponse.ResponseTuple)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .esw.MeasurementInfo measurementInfo = 1;
  if (this->_internal_has_measurementinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::measurementinfo(this),
        _Internal::measurementinfo(this).GetCachedSize(), target, stream);
  }

  // .esw.Average average = 2;
  if (this->_internal_has_average()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::average(this),
        _Internal::average(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.MeasurementsResponse.ResponseTuple)
  return target;
}

size_t MeasurementsResponse_ResponseTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.MeasurementsResponse.ResponseTuple)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esw.MeasurementInfo measurementInfo = 1;
  if (this->_internal_has_measurementinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.measurementinfo_);
  }

  // .esw.Average average = 2;
  if (this->_internal_has_average()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.average_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasurementsResponse_ResponseTuple::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeasurementsResponse_ResponseTuple::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeasurementsResponse_ResponseTuple::GetClassData() const { return &_class_data_; }

void MeasurementsResponse_ResponseTuple::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeasurementsResponse_ResponseTuple *>(to)->MergeFrom(
      static_cast<const MeasurementsResponse_ResponseTuple &>(from));
}


void MeasurementsResponse_ResponseTuple::MergeFrom(const MeasurementsResponse_ResponseTuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esw.MeasurementsResponse.ResponseTuple)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_measurementinfo()) {
    _internal_mutable_measurementinfo()->::esw::MeasurementInfo::MergeFrom(from._internal_measurementinfo());
  }
  if (from._internal_has_average()) {
    _internal_mutable_average()->::esw::Average::MergeFrom(from._internal_average());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasurementsResponse_ResponseTuple::CopyFrom(const MeasurementsResponse_ResponseTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.MeasurementsResponse.ResponseTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasurementsResponse_ResponseTuple::IsInitialized() const {
  return true;
}

void MeasurementsResponse_ResponseTuple::InternalSwap(MeasurementsResponse_ResponseTuple* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeasurementsResponse_ResponseTuple, _impl_.average_)
      + sizeof(MeasurementsResponse_ResponseTuple::_impl_.average_)
      - PROTOBUF_FIELD_OFFSET(MeasurementsResponse_ResponseTuple, _impl_.measurementinfo_)>(
          reinterpret_cast<char*>(&_impl_.measurementinfo_),
          reinterpret_cast<char*>(&other->_impl_.measurementinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasurementsResponse_ResponseTuple::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[4]);
}

// ===================================================================

class MeasurementsResponse::_Internal {
 public:
};

MeasurementsResponse::MeasurementsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.MeasurementsResponse)
}
MeasurementsResponse::MeasurementsResponse(const MeasurementsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.responsetuple_){from._impl_.responsetuple_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esw.MeasurementsResponse)
}

inline void MeasurementsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responsetuple_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MeasurementsResponse::~MeasurementsResponse() {
  // @@protoc_insertion_point(destructor:esw.MeasurementsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeasurementsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responsetuple_.~RepeatedPtrField();
}

void MeasurementsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeasurementsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.MeasurementsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responsetuple_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasurementsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .esw.MeasurementsResponse.ResponseTuple responseTuple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responsetuple(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeasurementsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.MeasurementsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .esw.MeasurementsResponse.ResponseTuple responseTuple = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_responsetuple_size()); i < n; i++) {
    const auto& repfield = this->_internal_responsetuple(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.MeasurementsResponse)
  return target;
}

size_t MeasurementsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.MeasurementsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esw.MeasurementsResponse.ResponseTuple responseTuple = 1;
  total_size += 1UL * this->_internal_responsetuple_size();
  for (const auto& msg : this->_impl_.responsetuple_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasurementsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeasurementsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeasurementsResponse::GetClassData() const { return &_class_data_; }

void MeasurementsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeasurementsResponse *>(to)->MergeFrom(
      static_cast<const MeasurementsResponse &>(from));
}


void MeasurementsResponse::MergeFrom(const MeasurementsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esw.MeasurementsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.responsetuple_.MergeFrom(from._impl_.responsetuple_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasurementsResponse::CopyFrom(const MeasurementsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.MeasurementsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasurementsResponse::IsInitialized() const {
  return true;
}

void MeasurementsResponse::InternalSwap(MeasurementsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.responsetuple_.InternalSwap(&other->_impl_.responsetuple_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasurementsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[5]);
}

// ===================================================================

class Average::_Internal {
 public:
};

Average::Average(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.Average)
}
Average::Average(const Average& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.download_){}
    , decltype(_impl_.upload_){}
    , decltype(_impl_.ping_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.download_, &from._impl_.download_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ping_) -
    reinterpret_cast<char*>(&_impl_.download_)) + sizeof(_impl_.ping_));
  // @@protoc_insertion_point(copy_constructor:esw.Average)
}

inline void Average::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.download_){0}
    , decltype(_impl_.upload_){0}
    , decltype(_impl_.ping_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Average::~Average() {
  // @@protoc_insertion_point(destructor:esw.Average)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Average::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Average::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Average::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.Average)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.download_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ping_) -
      reinterpret_cast<char*>(&_impl_.download_)) + sizeof(_impl_.ping_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Average::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double Download = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.download_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double Upload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.upload_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double Ping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.ping_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Average::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.Average)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double Download = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_download = this->_internal_download();
  uint64_t raw_download;
  memcpy(&raw_download, &tmp_download, sizeof(tmp_download));
  if (raw_download != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_download(), target);
  }

  // double Upload = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upload = this->_internal_upload();
  uint64_t raw_upload;
  memcpy(&raw_upload, &tmp_upload, sizeof(tmp_upload));
  if (raw_upload != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_upload(), target);
  }

  // double Ping = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ping = this->_internal_ping();
  uint64_t raw_ping;
  memcpy(&raw_ping, &tmp_ping, sizeof(tmp_ping));
  if (raw_ping != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.Average)
  return target;
}

size_t Average::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.Average)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Download = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_download = this->_internal_download();
  uint64_t raw_download;
  memcpy(&raw_download, &tmp_download, sizeof(tmp_download));
  if (raw_download != 0) {
    total_size += 1 + 8;
  }

  // double Upload = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upload = this->_internal_upload();
  uint64_t raw_upload;
  memcpy(&raw_upload, &tmp_upload, sizeof(tmp_upload));
  if (raw_upload != 0) {
    total_size += 1 + 8;
  }

  // double Ping = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ping = this->_internal_ping();
  uint64_t raw_ping;
  memcpy(&raw_ping, &tmp_ping, sizeof(tmp_ping));
  if (raw_ping != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Average::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Average::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Average::GetClassData() const { return &_class_data_; }

void Average::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Average *>(to)->MergeFrom(
      static_cast<const Average &>(from));
}


void Average::MergeFrom(const Average& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esw.Average)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_download = from._internal_download();
  uint64_t raw_download;
  memcpy(&raw_download, &tmp_download, sizeof(tmp_download));
  if (raw_download != 0) {
    _internal_set_download(from._internal_download());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upload = from._internal_upload();
  uint64_t raw_upload;
  memcpy(&raw_upload, &tmp_upload, sizeof(tmp_upload));
  if (raw_upload != 0) {
    _internal_set_upload(from._internal_upload());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ping = from._internal_ping();
  uint64_t raw_ping;
  memcpy(&raw_ping, &tmp_ping, sizeof(tmp_ping));
  if (raw_ping != 0) {
    _internal_set_ping(from._internal_ping());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Average::CopyFrom(const Average& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.Average)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Average::IsInitialized() const {
  return true;
}

void Average::InternalSwap(Average* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Average, _impl_.ping_)
      + sizeof(Average::_impl_.ping_)
      - PROTOBUF_FIELD_OFFSET(Average, _impl_.download_)>(
          reinterpret_cast<char*>(&_impl_.download_),
          reinterpret_cast<char*>(&other->_impl_.download_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Average::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace esw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esw::MeasurementInfo*
Arena::CreateMaybeMessage< ::esw::MeasurementInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::MeasurementInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::MeasurementsRequest_RequestTuple*
Arena::CreateMaybeMessage< ::esw::MeasurementsRequest_RequestTuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::MeasurementsRequest_RequestTuple >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::MeasurementsRequest*
Arena::CreateMaybeMessage< ::esw::MeasurementsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::MeasurementsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::Records*
Arena::CreateMaybeMessage< ::esw::Records >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::Records >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::MeasurementsResponse_ResponseTuple*
Arena::CreateMaybeMessage< ::esw::MeasurementsResponse_ResponseTuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::MeasurementsResponse_ResponseTuple >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::MeasurementsResponse*
Arena::CreateMaybeMessage< ::esw::MeasurementsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::MeasurementsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::Average*
Arena::CreateMaybeMessage< ::esw::Average >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::Average >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
