// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measurements.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_measurements_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_measurements_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_measurements_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_measurements_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_measurements_2eproto;
namespace esw {
class Average;
struct AverageDefaultTypeInternal;
extern AverageDefaultTypeInternal _Average_default_instance_;
class MeasurementInfo;
struct MeasurementInfoDefaultTypeInternal;
extern MeasurementInfoDefaultTypeInternal _MeasurementInfo_default_instance_;
class MeasurementsRequest;
struct MeasurementsRequestDefaultTypeInternal;
extern MeasurementsRequestDefaultTypeInternal _MeasurementsRequest_default_instance_;
class MeasurementsRequest_RequestTuple;
struct MeasurementsRequest_RequestTupleDefaultTypeInternal;
extern MeasurementsRequest_RequestTupleDefaultTypeInternal _MeasurementsRequest_RequestTuple_default_instance_;
class MeasurementsResponse;
struct MeasurementsResponseDefaultTypeInternal;
extern MeasurementsResponseDefaultTypeInternal _MeasurementsResponse_default_instance_;
class MeasurementsResponse_ResponseTuple;
struct MeasurementsResponse_ResponseTupleDefaultTypeInternal;
extern MeasurementsResponse_ResponseTupleDefaultTypeInternal _MeasurementsResponse_ResponseTuple_default_instance_;
class Records;
struct RecordsDefaultTypeInternal;
extern RecordsDefaultTypeInternal _Records_default_instance_;
}  // namespace esw
PROTOBUF_NAMESPACE_OPEN
template<> ::esw::Average* Arena::CreateMaybeMessage<::esw::Average>(Arena*);
template<> ::esw::MeasurementInfo* Arena::CreateMaybeMessage<::esw::MeasurementInfo>(Arena*);
template<> ::esw::MeasurementsRequest* Arena::CreateMaybeMessage<::esw::MeasurementsRequest>(Arena*);
template<> ::esw::MeasurementsRequest_RequestTuple* Arena::CreateMaybeMessage<::esw::MeasurementsRequest_RequestTuple>(Arena*);
template<> ::esw::MeasurementsResponse* Arena::CreateMaybeMessage<::esw::MeasurementsResponse>(Arena*);
template<> ::esw::MeasurementsResponse_ResponseTuple* Arena::CreateMaybeMessage<::esw::MeasurementsResponse_ResponseTuple>(Arena*);
template<> ::esw::Records* Arena::CreateMaybeMessage<::esw::Records>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esw {

// ===================================================================

class MeasurementInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.MeasurementInfo) */ {
 public:
  inline MeasurementInfo() : MeasurementInfo(nullptr) {}
  ~MeasurementInfo() override;
  explicit PROTOBUF_CONSTEXPR MeasurementInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeasurementInfo(const MeasurementInfo& from);
  MeasurementInfo(MeasurementInfo&& from) noexcept
    : MeasurementInfo() {
    *this = ::std::move(from);
  }

  inline MeasurementInfo& operator=(const MeasurementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementInfo& operator=(MeasurementInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeasurementInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeasurementInfo* internal_default_instance() {
    return reinterpret_cast<const MeasurementInfo*>(
               &_MeasurementInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MeasurementInfo& a, MeasurementInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasurementInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeasurementInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeasurementInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeasurementInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MeasurementInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.MeasurementInfo";
  }
  protected:
  explicit MeasurementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasurerNameFieldNumber = 3,
    kTimestampFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string measurerName = 3;
  void clear_measurername();
  const std::string& measurername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_measurername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_measurername();
  PROTOBUF_NODISCARD std::string* release_measurername();
  void set_allocated_measurername(std::string* measurername);
  private:
  const std::string& _internal_measurername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_measurername(const std::string& value);
  std::string* _internal_mutable_measurername();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:esw.MeasurementInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr measurername_;
    int64_t timestamp_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};
// -------------------------------------------------------------------

class MeasurementsRequest_RequestTuple final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.MeasurementsRequest.RequestTuple) */ {
 public:
  inline MeasurementsRequest_RequestTuple() : MeasurementsRequest_RequestTuple(nullptr) {}
  ~MeasurementsRequest_RequestTuple() override;
  explicit PROTOBUF_CONSTEXPR MeasurementsRequest_RequestTuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeasurementsRequest_RequestTuple(const MeasurementsRequest_RequestTuple& from);
  MeasurementsRequest_RequestTuple(MeasurementsRequest_RequestTuple&& from) noexcept
    : MeasurementsRequest_RequestTuple() {
    *this = ::std::move(from);
  }

  inline MeasurementsRequest_RequestTuple& operator=(const MeasurementsRequest_RequestTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementsRequest_RequestTuple& operator=(MeasurementsRequest_RequestTuple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeasurementsRequest_RequestTuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeasurementsRequest_RequestTuple* internal_default_instance() {
    return reinterpret_cast<const MeasurementsRequest_RequestTuple*>(
               &_MeasurementsRequest_RequestTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MeasurementsRequest_RequestTuple& a, MeasurementsRequest_RequestTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementsRequest_RequestTuple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasurementsRequest_RequestTuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeasurementsRequest_RequestTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeasurementsRequest_RequestTuple>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeasurementsRequest_RequestTuple& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MeasurementsRequest_RequestTuple& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementsRequest_RequestTuple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.MeasurementsRequest.RequestTuple";
  }
  protected:
  explicit MeasurementsRequest_RequestTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasurementInfoFieldNumber = 1,
    kRecordsFieldNumber = 2,
  };
  // .esw.MeasurementInfo measurementInfo = 1;
  bool has_measurementinfo() const;
  private:
  bool _internal_has_measurementinfo() const;
  public:
  void clear_measurementinfo();
  const ::esw::MeasurementInfo& measurementinfo() const;
  PROTOBUF_NODISCARD ::esw::MeasurementInfo* release_measurementinfo();
  ::esw::MeasurementInfo* mutable_measurementinfo();
  void set_allocated_measurementinfo(::esw::MeasurementInfo* measurementinfo);
  private:
  const ::esw::MeasurementInfo& _internal_measurementinfo() const;
  ::esw::MeasurementInfo* _internal_mutable_measurementinfo();
  public:
  void unsafe_arena_set_allocated_measurementinfo(
      ::esw::MeasurementInfo* measurementinfo);
  ::esw::MeasurementInfo* unsafe_arena_release_measurementinfo();

  // .esw.Records records = 2;
  bool has_records() const;
  private:
  bool _internal_has_records() const;
  public:
  void clear_records();
  const ::esw::Records& records() const;
  PROTOBUF_NODISCARD ::esw::Records* release_records();
  ::esw::Records* mutable_records();
  void set_allocated_records(::esw::Records* records);
  private:
  const ::esw::Records& _internal_records() const;
  ::esw::Records* _internal_mutable_records();
  public:
  void unsafe_arena_set_allocated_records(
      ::esw::Records* records);
  ::esw::Records* unsafe_arena_release_records();

  // @@protoc_insertion_point(class_scope:esw.MeasurementsRequest.RequestTuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::esw::MeasurementInfo* measurementinfo_;
    ::esw::Records* records_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};
// -------------------------------------------------------------------

class MeasurementsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.MeasurementsRequest) */ {
 public:
  inline MeasurementsRequest() : MeasurementsRequest(nullptr) {}
  ~MeasurementsRequest() override;
  explicit PROTOBUF_CONSTEXPR MeasurementsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeasurementsRequest(const MeasurementsRequest& from);
  MeasurementsRequest(MeasurementsRequest&& from) noexcept
    : MeasurementsRequest() {
    *this = ::std::move(from);
  }

  inline MeasurementsRequest& operator=(const MeasurementsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementsRequest& operator=(MeasurementsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeasurementsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeasurementsRequest* internal_default_instance() {
    return reinterpret_cast<const MeasurementsRequest*>(
               &_MeasurementsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MeasurementsRequest& a, MeasurementsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasurementsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeasurementsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeasurementsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeasurementsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MeasurementsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.MeasurementsRequest";
  }
  protected:
  explicit MeasurementsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MeasurementsRequest_RequestTuple RequestTuple;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTupleFieldNumber = 1,
  };
  // repeated .esw.MeasurementsRequest.RequestTuple requestTuple = 1;
  int requesttuple_size() const;
  private:
  int _internal_requesttuple_size() const;
  public:
  void clear_requesttuple();
  ::esw::MeasurementsRequest_RequestTuple* mutable_requesttuple(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::MeasurementsRequest_RequestTuple >*
      mutable_requesttuple();
  private:
  const ::esw::MeasurementsRequest_RequestTuple& _internal_requesttuple(int index) const;
  ::esw::MeasurementsRequest_RequestTuple* _internal_add_requesttuple();
  public:
  const ::esw::MeasurementsRequest_RequestTuple& requesttuple(int index) const;
  ::esw::MeasurementsRequest_RequestTuple* add_requesttuple();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::MeasurementsRequest_RequestTuple >&
      requesttuple() const;

  // @@protoc_insertion_point(class_scope:esw.MeasurementsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::MeasurementsRequest_RequestTuple > requesttuple_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};
// -------------------------------------------------------------------

class Records final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.Records) */ {
 public:
  inline Records() : Records(nullptr) {}
  ~Records() override;
  explicit PROTOBUF_CONSTEXPR Records(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Records(const Records& from);
  Records(Records&& from) noexcept
    : Records() {
    *this = ::std::move(from);
  }

  inline Records& operator=(const Records& from) {
    CopyFrom(from);
    return *this;
  }
  inline Records& operator=(Records&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Records& default_instance() {
    return *internal_default_instance();
  }
  static inline const Records* internal_default_instance() {
    return reinterpret_cast<const Records*>(
               &_Records_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Records& a, Records& b) {
    a.Swap(&b);
  }
  inline void Swap(Records* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Records* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Records* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Records>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Records& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Records& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Records* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.Records";
  }
  protected:
  explicit Records(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownloadFieldNumber = 1,
    kUploadFieldNumber = 2,
    kPingFieldNumber = 3,
  };
  // repeated double Download = 1;
  int download_size() const;
  private:
  int _internal_download_size() const;
  public:
  void clear_download();
  private:
  double _internal_download(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_download() const;
  void _internal_add_download(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_download();
  public:
  double download(int index) const;
  void set_download(int index, double value);
  void add_download(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      download() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_download();

  // repeated double Upload = 2;
  int upload_size() const;
  private:
  int _internal_upload_size() const;
  public:
  void clear_upload();
  private:
  double _internal_upload(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_upload() const;
  void _internal_add_upload(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_upload();
  public:
  double upload(int index) const;
  void set_upload(int index, double value);
  void add_upload(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      upload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_upload();

  // repeated double Ping = 3;
  int ping_size() const;
  private:
  int _internal_ping_size() const;
  public:
  void clear_ping();
  private:
  double _internal_ping(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ping() const;
  void _internal_add_ping(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ping();
  public:
  double ping(int index) const;
  void set_ping(int index, double value);
  void add_ping(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ping();

  // @@protoc_insertion_point(class_scope:esw.Records)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > download_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > upload_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ping_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};
// -------------------------------------------------------------------

class MeasurementsResponse_ResponseTuple final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.MeasurementsResponse.ResponseTuple) */ {
 public:
  inline MeasurementsResponse_ResponseTuple() : MeasurementsResponse_ResponseTuple(nullptr) {}
  ~MeasurementsResponse_ResponseTuple() override;
  explicit PROTOBUF_CONSTEXPR MeasurementsResponse_ResponseTuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeasurementsResponse_ResponseTuple(const MeasurementsResponse_ResponseTuple& from);
  MeasurementsResponse_ResponseTuple(MeasurementsResponse_ResponseTuple&& from) noexcept
    : MeasurementsResponse_ResponseTuple() {
    *this = ::std::move(from);
  }

  inline MeasurementsResponse_ResponseTuple& operator=(const MeasurementsResponse_ResponseTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementsResponse_ResponseTuple& operator=(MeasurementsResponse_ResponseTuple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeasurementsResponse_ResponseTuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeasurementsResponse_ResponseTuple* internal_default_instance() {
    return reinterpret_cast<const MeasurementsResponse_ResponseTuple*>(
               &_MeasurementsResponse_ResponseTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MeasurementsResponse_ResponseTuple& a, MeasurementsResponse_ResponseTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementsResponse_ResponseTuple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasurementsResponse_ResponseTuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeasurementsResponse_ResponseTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeasurementsResponse_ResponseTuple>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeasurementsResponse_ResponseTuple& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MeasurementsResponse_ResponseTuple& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementsResponse_ResponseTuple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.MeasurementsResponse.ResponseTuple";
  }
  protected:
  explicit MeasurementsResponse_ResponseTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasurementInfoFieldNumber = 1,
    kAverageFieldNumber = 2,
  };
  // .esw.MeasurementInfo measurementInfo = 1;
  bool has_measurementinfo() const;
  private:
  bool _internal_has_measurementinfo() const;
  public:
  void clear_measurementinfo();
  const ::esw::MeasurementInfo& measurementinfo() const;
  PROTOBUF_NODISCARD ::esw::MeasurementInfo* release_measurementinfo();
  ::esw::MeasurementInfo* mutable_measurementinfo();
  void set_allocated_measurementinfo(::esw::MeasurementInfo* measurementinfo);
  private:
  const ::esw::MeasurementInfo& _internal_measurementinfo() const;
  ::esw::MeasurementInfo* _internal_mutable_measurementinfo();
  public:
  void unsafe_arena_set_allocated_measurementinfo(
      ::esw::MeasurementInfo* measurementinfo);
  ::esw::MeasurementInfo* unsafe_arena_release_measurementinfo();

  // .esw.Average average = 2;
  bool has_average() const;
  private:
  bool _internal_has_average() const;
  public:
  void clear_average();
  const ::esw::Average& average() const;
  PROTOBUF_NODISCARD ::esw::Average* release_average();
  ::esw::Average* mutable_average();
  void set_allocated_average(::esw::Average* average);
  private:
  const ::esw::Average& _internal_average() const;
  ::esw::Average* _internal_mutable_average();
  public:
  void unsafe_arena_set_allocated_average(
      ::esw::Average* average);
  ::esw::Average* unsafe_arena_release_average();

  // @@protoc_insertion_point(class_scope:esw.MeasurementsResponse.ResponseTuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::esw::MeasurementInfo* measurementinfo_;
    ::esw::Average* average_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};
// -------------------------------------------------------------------

class MeasurementsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.MeasurementsResponse) */ {
 public:
  inline MeasurementsResponse() : MeasurementsResponse(nullptr) {}
  ~MeasurementsResponse() override;
  explicit PROTOBUF_CONSTEXPR MeasurementsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeasurementsResponse(const MeasurementsResponse& from);
  MeasurementsResponse(MeasurementsResponse&& from) noexcept
    : MeasurementsResponse() {
    *this = ::std::move(from);
  }

  inline MeasurementsResponse& operator=(const MeasurementsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementsResponse& operator=(MeasurementsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeasurementsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeasurementsResponse* internal_default_instance() {
    return reinterpret_cast<const MeasurementsResponse*>(
               &_MeasurementsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MeasurementsResponse& a, MeasurementsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasurementsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeasurementsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeasurementsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeasurementsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MeasurementsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.MeasurementsResponse";
  }
  protected:
  explicit MeasurementsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MeasurementsResponse_ResponseTuple ResponseTuple;

  // accessors -------------------------------------------------------

  enum : int {
    kResponseTupleFieldNumber = 1,
  };
  // repeated .esw.MeasurementsResponse.ResponseTuple responseTuple = 1;
  int responsetuple_size() const;
  private:
  int _internal_responsetuple_size() const;
  public:
  void clear_responsetuple();
  ::esw::MeasurementsResponse_ResponseTuple* mutable_responsetuple(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::MeasurementsResponse_ResponseTuple >*
      mutable_responsetuple();
  private:
  const ::esw::MeasurementsResponse_ResponseTuple& _internal_responsetuple(int index) const;
  ::esw::MeasurementsResponse_ResponseTuple* _internal_add_responsetuple();
  public:
  const ::esw::MeasurementsResponse_ResponseTuple& responsetuple(int index) const;
  ::esw::MeasurementsResponse_ResponseTuple* add_responsetuple();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::MeasurementsResponse_ResponseTuple >&
      responsetuple() const;

  // @@protoc_insertion_point(class_scope:esw.MeasurementsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::MeasurementsResponse_ResponseTuple > responsetuple_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};
// -------------------------------------------------------------------

class Average final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.Average) */ {
 public:
  inline Average() : Average(nullptr) {}
  ~Average() override;
  explicit PROTOBUF_CONSTEXPR Average(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Average(const Average& from);
  Average(Average&& from) noexcept
    : Average() {
    *this = ::std::move(from);
  }

  inline Average& operator=(const Average& from) {
    CopyFrom(from);
    return *this;
  }
  inline Average& operator=(Average&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Average& default_instance() {
    return *internal_default_instance();
  }
  static inline const Average* internal_default_instance() {
    return reinterpret_cast<const Average*>(
               &_Average_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Average& a, Average& b) {
    a.Swap(&b);
  }
  inline void Swap(Average* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Average* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Average* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Average>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Average& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Average& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Average* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.Average";
  }
  protected:
  explicit Average(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownloadFieldNumber = 1,
    kUploadFieldNumber = 2,
    kPingFieldNumber = 3,
  };
  // double Download = 1;
  void clear_download();
  double download() const;
  void set_download(double value);
  private:
  double _internal_download() const;
  void _internal_set_download(double value);
  public:

  // double Upload = 2;
  void clear_upload();
  double upload() const;
  void set_upload(double value);
  private:
  double _internal_upload() const;
  void _internal_set_upload(double value);
  public:

  // double Ping = 3;
  void clear_ping();
  double ping() const;
  void set_ping(double value);
  private:
  double _internal_ping() const;
  void _internal_set_ping(double value);
  public:

  // @@protoc_insertion_point(class_scope:esw.Average)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double download_;
    double upload_;
    double ping_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MeasurementInfo

// int32 id = 1;
inline void MeasurementInfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t MeasurementInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t MeasurementInfo::id() const {
  // @@protoc_insertion_point(field_get:esw.MeasurementInfo.id)
  return _internal_id();
}
inline void MeasurementInfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void MeasurementInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:esw.MeasurementInfo.id)
}

// int64 timestamp = 2;
inline void MeasurementInfo::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t MeasurementInfo::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t MeasurementInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:esw.MeasurementInfo.timestamp)
  return _internal_timestamp();
}
inline void MeasurementInfo::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void MeasurementInfo::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:esw.MeasurementInfo.timestamp)
}

// string measurerName = 3;
inline void MeasurementInfo::clear_measurername() {
  _impl_.measurername_.ClearToEmpty();
}
inline const std::string& MeasurementInfo::measurername() const {
  // @@protoc_insertion_point(field_get:esw.MeasurementInfo.measurerName)
  return _internal_measurername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MeasurementInfo::set_measurername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.measurername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:esw.MeasurementInfo.measurerName)
}
inline std::string* MeasurementInfo::mutable_measurername() {
  std::string* _s = _internal_mutable_measurername();
  // @@protoc_insertion_point(field_mutable:esw.MeasurementInfo.measurerName)
  return _s;
}
inline const std::string& MeasurementInfo::_internal_measurername() const {
  return _impl_.measurername_.Get();
}
inline void MeasurementInfo::_internal_set_measurername(const std::string& value) {
  
  _impl_.measurername_.Set(value, GetArenaForAllocation());
}
inline std::string* MeasurementInfo::_internal_mutable_measurername() {
  
  return _impl_.measurername_.Mutable(GetArenaForAllocation());
}
inline std::string* MeasurementInfo::release_measurername() {
  // @@protoc_insertion_point(field_release:esw.MeasurementInfo.measurerName)
  return _impl_.measurername_.Release();
}
inline void MeasurementInfo::set_allocated_measurername(std::string* measurername) {
  if (measurername != nullptr) {
    
  } else {
    
  }
  _impl_.measurername_.SetAllocated(measurername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.measurername_.IsDefault()) {
    _impl_.measurername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:esw.MeasurementInfo.measurerName)
}

// -------------------------------------------------------------------

// MeasurementsRequest_RequestTuple

// .esw.MeasurementInfo measurementInfo = 1;
inline bool MeasurementsRequest_RequestTuple::_internal_has_measurementinfo() const {
  return this != internal_default_instance() && _impl_.measurementinfo_ != nullptr;
}
inline bool MeasurementsRequest_RequestTuple::has_measurementinfo() const {
  return _internal_has_measurementinfo();
}
inline void MeasurementsRequest_RequestTuple::clear_measurementinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.measurementinfo_ != nullptr) {
    delete _impl_.measurementinfo_;
  }
  _impl_.measurementinfo_ = nullptr;
}
inline const ::esw::MeasurementInfo& MeasurementsRequest_RequestTuple::_internal_measurementinfo() const {
  const ::esw::MeasurementInfo* p = _impl_.measurementinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::esw::MeasurementInfo&>(
      ::esw::_MeasurementInfo_default_instance_);
}
inline const ::esw::MeasurementInfo& MeasurementsRequest_RequestTuple::measurementinfo() const {
  // @@protoc_insertion_point(field_get:esw.MeasurementsRequest.RequestTuple.measurementInfo)
  return _internal_measurementinfo();
}
inline void MeasurementsRequest_RequestTuple::unsafe_arena_set_allocated_measurementinfo(
    ::esw::MeasurementInfo* measurementinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.measurementinfo_);
  }
  _impl_.measurementinfo_ = measurementinfo;
  if (measurementinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.MeasurementsRequest.RequestTuple.measurementInfo)
}
inline ::esw::MeasurementInfo* MeasurementsRequest_RequestTuple::release_measurementinfo() {
  
  ::esw::MeasurementInfo* temp = _impl_.measurementinfo_;
  _impl_.measurementinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::esw::MeasurementInfo* MeasurementsRequest_RequestTuple::unsafe_arena_release_measurementinfo() {
  // @@protoc_insertion_point(field_release:esw.MeasurementsRequest.RequestTuple.measurementInfo)
  
  ::esw::MeasurementInfo* temp = _impl_.measurementinfo_;
  _impl_.measurementinfo_ = nullptr;
  return temp;
}
inline ::esw::MeasurementInfo* MeasurementsRequest_RequestTuple::_internal_mutable_measurementinfo() {
  
  if (_impl_.measurementinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::esw::MeasurementInfo>(GetArenaForAllocation());
    _impl_.measurementinfo_ = p;
  }
  return _impl_.measurementinfo_;
}
inline ::esw::MeasurementInfo* MeasurementsRequest_RequestTuple::mutable_measurementinfo() {
  ::esw::MeasurementInfo* _msg = _internal_mutable_measurementinfo();
  // @@protoc_insertion_point(field_mutable:esw.MeasurementsRequest.RequestTuple.measurementInfo)
  return _msg;
}
inline void MeasurementsRequest_RequestTuple::set_allocated_measurementinfo(::esw::MeasurementInfo* measurementinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.measurementinfo_;
  }
  if (measurementinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(measurementinfo);
    if (message_arena != submessage_arena) {
      measurementinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measurementinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.measurementinfo_ = measurementinfo;
  // @@protoc_insertion_point(field_set_allocated:esw.MeasurementsRequest.RequestTuple.measurementInfo)
}

// .esw.Records records = 2;
inline bool MeasurementsRequest_RequestTuple::_internal_has_records() const {
  return this != internal_default_instance() && _impl_.records_ != nullptr;
}
inline bool MeasurementsRequest_RequestTuple::has_records() const {
  return _internal_has_records();
}
inline void MeasurementsRequest_RequestTuple::clear_records() {
  if (GetArenaForAllocation() == nullptr && _impl_.records_ != nullptr) {
    delete _impl_.records_;
  }
  _impl_.records_ = nullptr;
}
inline const ::esw::Records& MeasurementsRequest_RequestTuple::_internal_records() const {
  const ::esw::Records* p = _impl_.records_;
  return p != nullptr ? *p : reinterpret_cast<const ::esw::Records&>(
      ::esw::_Records_default_instance_);
}
inline const ::esw::Records& MeasurementsRequest_RequestTuple::records() const {
  // @@protoc_insertion_point(field_get:esw.MeasurementsRequest.RequestTuple.records)
  return _internal_records();
}
inline void MeasurementsRequest_RequestTuple::unsafe_arena_set_allocated_records(
    ::esw::Records* records) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.records_);
  }
  _impl_.records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.MeasurementsRequest.RequestTuple.records)
}
inline ::esw::Records* MeasurementsRequest_RequestTuple::release_records() {
  
  ::esw::Records* temp = _impl_.records_;
  _impl_.records_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::esw::Records* MeasurementsRequest_RequestTuple::unsafe_arena_release_records() {
  // @@protoc_insertion_point(field_release:esw.MeasurementsRequest.RequestTuple.records)
  
  ::esw::Records* temp = _impl_.records_;
  _impl_.records_ = nullptr;
  return temp;
}
inline ::esw::Records* MeasurementsRequest_RequestTuple::_internal_mutable_records() {
  
  if (_impl_.records_ == nullptr) {
    auto* p = CreateMaybeMessage<::esw::Records>(GetArenaForAllocation());
    _impl_.records_ = p;
  }
  return _impl_.records_;
}
inline ::esw::Records* MeasurementsRequest_RequestTuple::mutable_records() {
  ::esw::Records* _msg = _internal_mutable_records();
  // @@protoc_insertion_point(field_mutable:esw.MeasurementsRequest.RequestTuple.records)
  return _msg;
}
inline void MeasurementsRequest_RequestTuple::set_allocated_records(::esw::Records* records) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.records_;
  }
  if (records) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(records);
    if (message_arena != submessage_arena) {
      records = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, records, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.records_ = records;
  // @@protoc_insertion_point(field_set_allocated:esw.MeasurementsRequest.RequestTuple.records)
}

// -------------------------------------------------------------------

// MeasurementsRequest

// repeated .esw.MeasurementsRequest.RequestTuple requestTuple = 1;
inline int MeasurementsRequest::_internal_requesttuple_size() const {
  return _impl_.requesttuple_.size();
}
inline int MeasurementsRequest::requesttuple_size() const {
  return _internal_requesttuple_size();
}
inline void MeasurementsRequest::clear_requesttuple() {
  _impl_.requesttuple_.Clear();
}
inline ::esw::MeasurementsRequest_RequestTuple* MeasurementsRequest::mutable_requesttuple(int index) {
  // @@protoc_insertion_point(field_mutable:esw.MeasurementsRequest.requestTuple)
  return _impl_.requesttuple_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::MeasurementsRequest_RequestTuple >*
MeasurementsRequest::mutable_requesttuple() {
  // @@protoc_insertion_point(field_mutable_list:esw.MeasurementsRequest.requestTuple)
  return &_impl_.requesttuple_;
}
inline const ::esw::MeasurementsRequest_RequestTuple& MeasurementsRequest::_internal_requesttuple(int index) const {
  return _impl_.requesttuple_.Get(index);
}
inline const ::esw::MeasurementsRequest_RequestTuple& MeasurementsRequest::requesttuple(int index) const {
  // @@protoc_insertion_point(field_get:esw.MeasurementsRequest.requestTuple)
  return _internal_requesttuple(index);
}
inline ::esw::MeasurementsRequest_RequestTuple* MeasurementsRequest::_internal_add_requesttuple() {
  return _impl_.requesttuple_.Add();
}
inline ::esw::MeasurementsRequest_RequestTuple* MeasurementsRequest::add_requesttuple() {
  ::esw::MeasurementsRequest_RequestTuple* _add = _internal_add_requesttuple();
  // @@protoc_insertion_point(field_add:esw.MeasurementsRequest.requestTuple)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::MeasurementsRequest_RequestTuple >&
MeasurementsRequest::requesttuple() const {
  // @@protoc_insertion_point(field_list:esw.MeasurementsRequest.requestTuple)
  return _impl_.requesttuple_;
}

// -------------------------------------------------------------------

// Records

// repeated double Download = 1;
inline int Records::_internal_download_size() const {
  return _impl_.download_.size();
}
inline int Records::download_size() const {
  return _internal_download_size();
}
inline void Records::clear_download() {
  _impl_.download_.Clear();
}
inline double Records::_internal_download(int index) const {
  return _impl_.download_.Get(index);
}
inline double Records::download(int index) const {
  // @@protoc_insertion_point(field_get:esw.Records.Download)
  return _internal_download(index);
}
inline void Records::set_download(int index, double value) {
  _impl_.download_.Set(index, value);
  // @@protoc_insertion_point(field_set:esw.Records.Download)
}
inline void Records::_internal_add_download(double value) {
  _impl_.download_.Add(value);
}
inline void Records::add_download(double value) {
  _internal_add_download(value);
  // @@protoc_insertion_point(field_add:esw.Records.Download)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Records::_internal_download() const {
  return _impl_.download_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Records::download() const {
  // @@protoc_insertion_point(field_list:esw.Records.Download)
  return _internal_download();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Records::_internal_mutable_download() {
  return &_impl_.download_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Records::mutable_download() {
  // @@protoc_insertion_point(field_mutable_list:esw.Records.Download)
  return _internal_mutable_download();
}

// repeated double Upload = 2;
inline int Records::_internal_upload_size() const {
  return _impl_.upload_.size();
}
inline int Records::upload_size() const {
  return _internal_upload_size();
}
inline void Records::clear_upload() {
  _impl_.upload_.Clear();
}
inline double Records::_internal_upload(int index) const {
  return _impl_.upload_.Get(index);
}
inline double Records::upload(int index) const {
  // @@protoc_insertion_point(field_get:esw.Records.Upload)
  return _internal_upload(index);
}
inline void Records::set_upload(int index, double value) {
  _impl_.upload_.Set(index, value);
  // @@protoc_insertion_point(field_set:esw.Records.Upload)
}
inline void Records::_internal_add_upload(double value) {
  _impl_.upload_.Add(value);
}
inline void Records::add_upload(double value) {
  _internal_add_upload(value);
  // @@protoc_insertion_point(field_add:esw.Records.Upload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Records::_internal_upload() const {
  return _impl_.upload_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Records::upload() const {
  // @@protoc_insertion_point(field_list:esw.Records.Upload)
  return _internal_upload();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Records::_internal_mutable_upload() {
  return &_impl_.upload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Records::mutable_upload() {
  // @@protoc_insertion_point(field_mutable_list:esw.Records.Upload)
  return _internal_mutable_upload();
}

// repeated double Ping = 3;
inline int Records::_internal_ping_size() const {
  return _impl_.ping_.size();
}
inline int Records::ping_size() const {
  return _internal_ping_size();
}
inline void Records::clear_ping() {
  _impl_.ping_.Clear();
}
inline double Records::_internal_ping(int index) const {
  return _impl_.ping_.Get(index);
}
inline double Records::ping(int index) const {
  // @@protoc_insertion_point(field_get:esw.Records.Ping)
  return _internal_ping(index);
}
inline void Records::set_ping(int index, double value) {
  _impl_.ping_.Set(index, value);
  // @@protoc_insertion_point(field_set:esw.Records.Ping)
}
inline void Records::_internal_add_ping(double value) {
  _impl_.ping_.Add(value);
}
inline void Records::add_ping(double value) {
  _internal_add_ping(value);
  // @@protoc_insertion_point(field_add:esw.Records.Ping)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Records::_internal_ping() const {
  return _impl_.ping_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Records::ping() const {
  // @@protoc_insertion_point(field_list:esw.Records.Ping)
  return _internal_ping();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Records::_internal_mutable_ping() {
  return &_impl_.ping_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Records::mutable_ping() {
  // @@protoc_insertion_point(field_mutable_list:esw.Records.Ping)
  return _internal_mutable_ping();
}

// -------------------------------------------------------------------

// MeasurementsResponse_ResponseTuple

// .esw.MeasurementInfo measurementInfo = 1;
inline bool MeasurementsResponse_ResponseTuple::_internal_has_measurementinfo() const {
  return this != internal_default_instance() && _impl_.measurementinfo_ != nullptr;
}
inline bool MeasurementsResponse_ResponseTuple::has_measurementinfo() const {
  return _internal_has_measurementinfo();
}
inline void MeasurementsResponse_ResponseTuple::clear_measurementinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.measurementinfo_ != nullptr) {
    delete _impl_.measurementinfo_;
  }
  _impl_.measurementinfo_ = nullptr;
}
inline const ::esw::MeasurementInfo& MeasurementsResponse_ResponseTuple::_internal_measurementinfo() const {
  const ::esw::MeasurementInfo* p = _impl_.measurementinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::esw::MeasurementInfo&>(
      ::esw::_MeasurementInfo_default_instance_);
}
inline const ::esw::MeasurementInfo& MeasurementsResponse_ResponseTuple::measurementinfo() const {
  // @@protoc_insertion_point(field_get:esw.MeasurementsResponse.ResponseTuple.measurementInfo)
  return _internal_measurementinfo();
}
inline void MeasurementsResponse_ResponseTuple::unsafe_arena_set_allocated_measurementinfo(
    ::esw::MeasurementInfo* measurementinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.measurementinfo_);
  }
  _impl_.measurementinfo_ = measurementinfo;
  if (measurementinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.MeasurementsResponse.ResponseTuple.measurementInfo)
}
inline ::esw::MeasurementInfo* MeasurementsResponse_ResponseTuple::release_measurementinfo() {
  
  ::esw::MeasurementInfo* temp = _impl_.measurementinfo_;
  _impl_.measurementinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::esw::MeasurementInfo* MeasurementsResponse_ResponseTuple::unsafe_arena_release_measurementinfo() {
  // @@protoc_insertion_point(field_release:esw.MeasurementsResponse.ResponseTuple.measurementInfo)
  
  ::esw::MeasurementInfo* temp = _impl_.measurementinfo_;
  _impl_.measurementinfo_ = nullptr;
  return temp;
}
inline ::esw::MeasurementInfo* MeasurementsResponse_ResponseTuple::_internal_mutable_measurementinfo() {
  
  if (_impl_.measurementinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::esw::MeasurementInfo>(GetArenaForAllocation());
    _impl_.measurementinfo_ = p;
  }
  return _impl_.measurementinfo_;
}
inline ::esw::MeasurementInfo* MeasurementsResponse_ResponseTuple::mutable_measurementinfo() {
  ::esw::MeasurementInfo* _msg = _internal_mutable_measurementinfo();
  // @@protoc_insertion_point(field_mutable:esw.MeasurementsResponse.ResponseTuple.measurementInfo)
  return _msg;
}
inline void MeasurementsResponse_ResponseTuple::set_allocated_measurementinfo(::esw::MeasurementInfo* measurementinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.measurementinfo_;
  }
  if (measurementinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(measurementinfo);
    if (message_arena != submessage_arena) {
      measurementinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measurementinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.measurementinfo_ = measurementinfo;
  // @@protoc_insertion_point(field_set_allocated:esw.MeasurementsResponse.ResponseTuple.measurementInfo)
}

// .esw.Average average = 2;
inline bool MeasurementsResponse_ResponseTuple::_internal_has_average() const {
  return this != internal_default_instance() && _impl_.average_ != nullptr;
}
inline bool MeasurementsResponse_ResponseTuple::has_average() const {
  return _internal_has_average();
}
inline void MeasurementsResponse_ResponseTuple::clear_average() {
  if (GetArenaForAllocation() == nullptr && _impl_.average_ != nullptr) {
    delete _impl_.average_;
  }
  _impl_.average_ = nullptr;
}
inline const ::esw::Average& MeasurementsResponse_ResponseTuple::_internal_average() const {
  const ::esw::Average* p = _impl_.average_;
  return p != nullptr ? *p : reinterpret_cast<const ::esw::Average&>(
      ::esw::_Average_default_instance_);
}
inline const ::esw::Average& MeasurementsResponse_ResponseTuple::average() const {
  // @@protoc_insertion_point(field_get:esw.MeasurementsResponse.ResponseTuple.average)
  return _internal_average();
}
inline void MeasurementsResponse_ResponseTuple::unsafe_arena_set_allocated_average(
    ::esw::Average* average) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_);
  }
  _impl_.average_ = average;
  if (average) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.MeasurementsResponse.ResponseTuple.average)
}
inline ::esw::Average* MeasurementsResponse_ResponseTuple::release_average() {
  
  ::esw::Average* temp = _impl_.average_;
  _impl_.average_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::esw::Average* MeasurementsResponse_ResponseTuple::unsafe_arena_release_average() {
  // @@protoc_insertion_point(field_release:esw.MeasurementsResponse.ResponseTuple.average)
  
  ::esw::Average* temp = _impl_.average_;
  _impl_.average_ = nullptr;
  return temp;
}
inline ::esw::Average* MeasurementsResponse_ResponseTuple::_internal_mutable_average() {
  
  if (_impl_.average_ == nullptr) {
    auto* p = CreateMaybeMessage<::esw::Average>(GetArenaForAllocation());
    _impl_.average_ = p;
  }
  return _impl_.average_;
}
inline ::esw::Average* MeasurementsResponse_ResponseTuple::mutable_average() {
  ::esw::Average* _msg = _internal_mutable_average();
  // @@protoc_insertion_point(field_mutable:esw.MeasurementsResponse.ResponseTuple.average)
  return _msg;
}
inline void MeasurementsResponse_ResponseTuple::set_allocated_average(::esw::Average* average) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.average_;
  }
  if (average) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(average);
    if (message_arena != submessage_arena) {
      average = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, average, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.average_ = average;
  // @@protoc_insertion_point(field_set_allocated:esw.MeasurementsResponse.ResponseTuple.average)
}

// -------------------------------------------------------------------

// MeasurementsResponse

// repeated .esw.MeasurementsResponse.ResponseTuple responseTuple = 1;
inline int MeasurementsResponse::_internal_responsetuple_size() const {
  return _impl_.responsetuple_.size();
}
inline int MeasurementsResponse::responsetuple_size() const {
  return _internal_responsetuple_size();
}
inline void MeasurementsResponse::clear_responsetuple() {
  _impl_.responsetuple_.Clear();
}
inline ::esw::MeasurementsResponse_ResponseTuple* MeasurementsResponse::mutable_responsetuple(int index) {
  // @@protoc_insertion_point(field_mutable:esw.MeasurementsResponse.responseTuple)
  return _impl_.responsetuple_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::MeasurementsResponse_ResponseTuple >*
MeasurementsResponse::mutable_responsetuple() {
  // @@protoc_insertion_point(field_mutable_list:esw.MeasurementsResponse.responseTuple)
  return &_impl_.responsetuple_;
}
inline const ::esw::MeasurementsResponse_ResponseTuple& MeasurementsResponse::_internal_responsetuple(int index) const {
  return _impl_.responsetuple_.Get(index);
}
inline const ::esw::MeasurementsResponse_ResponseTuple& MeasurementsResponse::responsetuple(int index) const {
  // @@protoc_insertion_point(field_get:esw.MeasurementsResponse.responseTuple)
  return _internal_responsetuple(index);
}
inline ::esw::MeasurementsResponse_ResponseTuple* MeasurementsResponse::_internal_add_responsetuple() {
  return _impl_.responsetuple_.Add();
}
inline ::esw::MeasurementsResponse_ResponseTuple* MeasurementsResponse::add_responsetuple() {
  ::esw::MeasurementsResponse_ResponseTuple* _add = _internal_add_responsetuple();
  // @@protoc_insertion_point(field_add:esw.MeasurementsResponse.responseTuple)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::MeasurementsResponse_ResponseTuple >&
MeasurementsResponse::responsetuple() const {
  // @@protoc_insertion_point(field_list:esw.MeasurementsResponse.responseTuple)
  return _impl_.responsetuple_;
}

// -------------------------------------------------------------------

// Average

// double Download = 1;
inline void Average::clear_download() {
  _impl_.download_ = 0;
}
inline double Average::_internal_download() const {
  return _impl_.download_;
}
inline double Average::download() const {
  // @@protoc_insertion_point(field_get:esw.Average.Download)
  return _internal_download();
}
inline void Average::_internal_set_download(double value) {
  
  _impl_.download_ = value;
}
inline void Average::set_download(double value) {
  _internal_set_download(value);
  // @@protoc_insertion_point(field_set:esw.Average.Download)
}

// double Upload = 2;
inline void Average::clear_upload() {
  _impl_.upload_ = 0;
}
inline double Average::_internal_upload() const {
  return _impl_.upload_;
}
inline double Average::upload() const {
  // @@protoc_insertion_point(field_get:esw.Average.Upload)
  return _internal_upload();
}
inline void Average::_internal_set_upload(double value) {
  
  _impl_.upload_ = value;
}
inline void Average::set_upload(double value) {
  _internal_set_upload(value);
  // @@protoc_insertion_point(field_set:esw.Average.Upload)
}

// double Ping = 3;
inline void Average::clear_ping() {
  _impl_.ping_ = 0;
}
inline double Average::_internal_ping() const {
  return _impl_.ping_;
}
inline double Average::ping() const {
  // @@protoc_insertion_point(field_get:esw.Average.Ping)
  return _internal_ping();
}
inline void Average::_internal_set_ping(double value) {
  
  _impl_.ping_ = value;
}
inline void Average::set_ping(double value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:esw.Average.Ping)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace esw

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_measurements_2eproto
